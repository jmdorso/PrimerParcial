/*
 * cliente.c
 *
 *  Created on: 10 oct. 2019
 *      Author: alumno
 */


#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include "utn.h"
#include "cliente.h"

/** \brief va generando un ID secuencial cada vez que es llamada
 * \param void, no recibe ningun paramentro.
 * \return el id incrementado cada vez que es llamada(debido a que esta declarada como static
 * no pierde el valor anterior)
 *
 */

static int generarIdCliente(void)
{
	static int idIncremental=0;
	idIncremental++;

	return idIncremental;
}

/** \brief Inicializa un array de clientes con el estado libre(es decir, un array vacio y listo para cargar)
 * \param *aArray es el array a inicializar
 * \param cantidad es la cantidad de elementos del array
 * \return -1 si hay algun error o 0 si esta bien.
 *
 */

int initLugarLibreCliente(sCliente *aArray, int cantidad)
{
	int retorno = EXIT_ERROR;
	int i;

	if(aArray != NULL && cantidad >0)
	{
		for(i=0;i<cantidad;i++)
		{
			aArray[i].status = STATUS_EMPTY;
		}
	retorno = EXIT_SUCCESS;
	}
	return retorno;
}

/** \brief Da de alta un cliente (previamente cargado) en el array (en la primer posicion libre que encuentra)
 * \param *aArray es el array en el que se dara de alta
 * \param cantidad es la cantidad de elementos del array
 * \param cliente es una variable con los datos del cliente a dar de alta dentro del array
 * \return -1 si hay algun error o el ID si esta bien.
 *
 */

int altaClientePorId(sCliente *aArray, int cantidad,sCliente cliente)
{
	int retorno = EXIT_ERROR;
	int posArray;

	if(aArray != NULL && cantidad >0)
	{
		posArray = buscarLugarLibreCliente(aArray,cantidad);
		if(posArray >= 0 && buscarClientePorId(aArray,cantidad,cliente.id) == -1)
			{
				cliente.status=STATUS_NOT_EMPTY;
				cliente.id=generarIdCliente();
				aArray[posArray] = cliente;
				retorno = cliente.id;
			}
	}
	return retorno;
}

/** \brief busca el primer lugar libre en el array
 * \param *aArray es el array de clientes
 * \param cantidad es la cantidad de elementos del array
 * \return -1 si hay algun error o la POSICION EN EL ARRAY del primer elemento libre
 *
 */

int buscarLugarLibreCliente(sCliente *aArray, int cantidad)
{
	int retorno = EXIT_ERROR;
	int posArray;

	if(aArray != NULL && cantidad >0)
	{
		for(posArray=0;posArray<cantidad;posArray++)
		{
			if(aArray[posArray].status == STATUS_EMPTY)
			{
				retorno = posArray;
				break;
			}
		}
	}
	return retorno;
}

/** \brief busca el elemento con el ID indicado en el array
 * \param *aArray es el array en el que se buscara el ID
 * \param cantidad es la cantidad de elementos del array
 * \param id es el ID a buscar
 * \return -1 si hay algun error o la POSICION EN EL ARRAY del elemento con dicho ID
 *
 */

int buscarClientePorId(sCliente *aArray, int cantidad,int id)
{
	int retorno = EXIT_ERROR;
	int posArray;

	if(aArray != NULL && cantidad >0 && id >= 0)
	{
		for(posArray=0;posArray<cantidad;posArray++)
		{
			if(aArray[posArray].status == 1)
			{
				if(aArray[posArray].id == id)
				{
				retorno = posArray;
				break;
				}
			}
		}
	}
	return retorno;
}

/** \brief cargamos datos de un cliente a traves de interaccion con el usuario
 * \param *cliente una variable del tipo cliente en donde cargar los datos
 * \return -1 si hay algun error o 0 si esta bien
 *
 */

int altaUnSoloClientePorUI(sCliente *cliente)
{
	int retorno = EXIT_ERROR;
	char bufferNombre[CANT_CARACTERES];
	char bufferCuit[CANT_CARACTERES];
	char bufferDireccion[CANT_CARACTERES];
	char bufferLocalidad[CANT_CARACTERES];

	getString(bufferNombre,"\nIngrese Nombre: ","\nError",1,CANT_CARACTERES,CANT_REINTENTOS);
	retorno = esNombreOApellido(bufferNombre,"No es un nombre valido");
	if(retorno == EXIT_SUCCESS)
	{
		getString(bufferCuit,"\nIngrese CUIT(sin espacios, guiones o puntos): ","\nError",1,CANT_CARACTERES_CUIT,CANT_REINTENTOS);
		retorno = esSoloNumeros(bufferCuit,"No es un CUIT Valido");
		if(retorno == EXIT_SUCCESS)
		{
			getString(bufferLocalidad,"\nIngrese Localidad: ","\nError",1,CANT_CARACTERES,CANT_REINTENTOS);
			retorno = esAlfaNumerico(bufferLocalidad,"No es una localidad valida");
			if(retorno == EXIT_SUCCESS)
			{
				getString(bufferDireccion,"\nIngrese Direccion: ","\nError",1,CANT_CARACTERES,CANT_REINTENTOS);
				retorno = esAlfaNumerico(bufferDireccion,"No es una direccion valida");
				if(retorno == EXIT_SUCCESS)
				{
					strncpy(cliente->nombre,bufferNombre,CANT_CARACTERES);
					strncpy(cliente->cuit,bufferCuit,CANT_CARACTERES_CUIT);
					strncpy(cliente->localidad,bufferLocalidad,CANT_CARACTERES);
					strncpy(cliente->direccion,bufferDireccion,CANT_CARACTERES);
				}

			}
		}
	}
	return retorno;
}
