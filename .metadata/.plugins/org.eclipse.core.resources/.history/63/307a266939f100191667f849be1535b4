/*
 * informes.c
 *
 *  Created on: 17 oct. 2019
 *      Author: alumno
 */

#include "informes.h"
#include "pedidos.h"
#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>

int clienteConMasPedidosPendientes(sCliente *aCliente,int cantClientes,sPedido *aPedido,int cantPedidos,auxContCliente *aCont,int cantContCliente)
{
	int retorno = EXIT_ERROR;
	int i;
	int j;
	int auxIdCliente;
	int posCliente;
	int max=0;;

	if(aCliente != NULL && cantClientes>0 &&
		aPedido != NULL && cantPedidos>0 &&
		aCont != NULL && cantContCliente>0)
	{

		for(i=0;i<cantClientes;i++)
				{
					aCont[i].status = STATUS_EMPTY;
					aCont[i].contPedidos = 0;
				}
				for(i=0;i<cantClientes;i++)
				{
					aCont[i].idCliente=aCliente[i].id;
					for(j=0;j<cantPedidos;j++)
					{
						if((aCliente[i].id == aPedido[j].idCliente) && (aPedido[j].estado==ESTADO_PENDIENTE))
						{
							aCont[i].contPedidos++;
							retorno=EXIT_SUCCESS;
						}
					}
				}
				if(retorno==EXIT_SUCCESS)
				{
					i=0;
					j=0;
				}
				for(i=0;i<cantClientes;i++)
				{
					if(i==0)
					{
						max=aCont[i].contPedidos;
						auxIdCliente=aCont[i].idCliente;
					}
					if(aCont[i].contPedidos > max)
					{
						max=aCont[i].contPedidos;
						auxIdCliente=aCont[i].idCliente;
					}
				}
		posCliente=buscarClientePorId(aCliente,cantClientes,auxIdCliente);
		printf("\n\nEl cliente que mas pedidos posee es: \n");
		printf("Nombre: %s\n",aCliente[posCliente].nombre);
		printf("CUIT: %s\n",aCliente[posCliente].cuit);
		printf("Localidad: %s\n",aCliente[posCliente].localidad);
		printf("Direccion: %s\n",aCliente[posCliente].direccion);
		printf("CANT PEDIDOS PENDIENTES %d\n\n",max);
	}


	return retorno;
}

int clienteConMasPedidosCompletados(sCliente *aCliente,int cantClientes,sPedido *aPedido,int cantPedidos,auxContCliente *aCont,int cantContCliente)
{
	int retorno = EXIT_ERROR;
	int i;
	int j;
	int auxIdCliente;
	int posCliente;
	int max=0;;

	if(aCliente != NULL && cantClientes>0 &&
		aPedido != NULL && cantPedidos>0 &&
		aCont != NULL && cantContCliente>0)
	{

		for(i=0;i<cantClientes;i++)
				{
					aCont[i].status = STATUS_EMPTY;
					aCont[i].contPedidos = 0;
				}
				for(i=0;i<cantClientes;i++)
				{
					aCont[i].idCliente=aCliente[i].id;
					for(j=0;j<cantPedidos;j++)
					{
						if((aPedido[j].estado==ESTADO_COMPLETADO)&&(aCliente[i].id == aPedido[j].idCliente))
						{
							aCont[i].contPedidos++;
							retorno=EXIT_SUCCESS;
						}
					}
				}
				if(retorno==EXIT_SUCCESS)
				{
					i=0;
				}
				for(i=0;i<cantClientes;i++)
				{
					if(i==0)
					{
						max=aCont[i].contPedidos;
						auxIdCliente=aCont[i].idCliente;
					}
					if(aCont[i].contPedidos > max)
					{
						max=aCont[i].contPedidos;
						auxIdCliente=aCont[i].idCliente;
					}
				}
		posCliente=buscarClientePorId(aCliente,cantClientes,auxIdCliente);
		printf("\n\nEl cliente que mas pedidos posee es: \n");
		printf("Nombre: %s\n",aCliente[posCliente].nombre);
		printf("CUIT: %s\n",aCliente[posCliente].cuit);
		printf("Localidad: %s\n",aCliente[posCliente].localidad);
		printf("Direccion: %s\n",aCliente[posCliente].direccion);
		printf("CANT PEDIDOS COMPLETADOS %d\n\n",max);
	}


	return retorno;
}

int clienteConMasPedidos(sCliente *aCliente,int cantClientes,sPedido *aPedido,int cantPedidos,auxContCliente *aCont,int cantContCliente)
{
	int retorno = EXIT_ERROR;
	int i;
	int j;
	int auxIdCliente;
	int posCliente;
	int max=0;;

	if(aCliente != NULL && cantClientes>0 &&
		aPedido != NULL && cantPedidos>0 &&
		aCont != NULL && cantContCliente>0)
	{

		for(i=0;i<cantClientes;i++)
				{
					aCont[i].status = STATUS_EMPTY;
					aCont[i].contPedidos = 0;
				}
				for(i=0;i<cantClientes;i++)
				{
					aCont[i].idCliente=aCliente[i].id;
					for(j=0;j<cantPedidos;j++)
					{
						if((aPedido[j].status==STATUS_NOT_EMPTY)&&(aCliente[i].id == aPedido[j].idCliente))
						{
							aCont[i].contPedidos++;
							retorno=EXIT_SUCCESS;
						}
					}
				}
				if(retorno==EXIT_SUCCESS)
				{
					i=0;
				}
				for(i=0;i<cantClientes;i++)
				{
					if(i==0)
					{
						max=aCont[i].contPedidos;
						auxIdCliente=aCont[i].idCliente;
					}
					if(aCont[i].contPedidos > max)
					{
						max=aCont[i].contPedidos;
						auxIdCliente=aCont[i].idCliente;
					}
				}
		posCliente=buscarClientePorId(aCliente,cantClientes,auxIdCliente);
		printf("\n\nEl cliente que mas pedidos posee es: \n");
		printf("Nombre: %s\n",aCliente[posCliente].nombre);
		printf("CUIT: %s\n",aCliente[posCliente].cuit);
		printf("Localidad: %s\n",aCliente[posCliente].localidad);
		printf("Direccion: %s\n",aCliente[posCliente].direccion);
		printf("CANT PEDIDOS %d\n\n",max);
	}


	return retorno;
}

/** \brief imprime elementos del array con el campo status NOT EMPTY(es decir elementos cargados) y estado COMPLETADO
 * \param *aArray es el array a mostrar
 * \param cantidad es la cantidad de elementos del array
 * \param aClientes es el array de clientes a mostrar
 * \param cantClientes es la cant de clientes
 * \return -1 si hay algun error o 0 si esta bien
 *
 */

int imprimirArrayPedidosStatusOkyCompletadosPorcentajeReciclado(sPedido *aArray, int cantidad,sCliente *aCliente, int cantCliente)
{
	int i;
	int auxId;
	float promedio;
	float sumaKgProcesados;
	int retorno = EXIT_ERROR;
	char estadoPedido[2][25] = {"Completado","Pendiente"};

	if(aArray != NULL && cantidad>0)
	{
		retorno = EXIT_SUCCESS;
		printf("\n-----------------------------LISTA DE PEDIDOS COMPLETADOS--------------------------------\n");
		printf("%12s | %15s | %15s | %15s\n","ID PEDIDO", "CUIT","% PLASTICO RECICLADO","ESTADO");
		for(i=0;i<cantidad;i++)
		{
			if(aArray[i].status==STATUS_NOT_EMPTY && aArray[i].estado==ESTADO_COMPLETADO)
			{
				auxId = buscarClientePorId(aCliente,cantCliente,aArray[i].idCliente);
				sumaKgProcesados=aArray[i].cantKgHDPE+aArray[i].cantKgLDPE+aArray[i].cantKgPP;
				promedio=sumaKgProcesados/aArray[i].cantKg;
				printf("%12d | %15s | %20.2f | %15s \n",
						aArray[i].id,aCliente[auxId].cuit,promedio,estadoPedido[aArray[i].estado-1]);
			}
		}
	}
	return retorno;
}
