/*
 * pedidos.c
 *
 *  Created on: 10 oct. 2019
 *      Author: alumno
 */

#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>
#include "utn.h"
#include "cliente.h"
#include "pedidos.h"

/** \brief va generando un ID secuencial cada vez que es llamada
 * \param void, no recibe ningun paramentro.
 * \return el id incrementado cada vez que es llamada(debido a que esta declarada como static
 * no pierde el valor anterior)
 *
 */

static int generarIdPedido(void)
{
	static int idIncremental=0;
	idIncremental++;

	return idIncremental;
}

/** \brief Inicializa un array de pedidos con el estado libre(es decir, un array vacio y listo para cargar)
 * \param *aArray es el array a inicializar
 * \param cantidad es la cantidad de elementos del array
 * \return -1 si hay algun error o 0 si esta bien.
 *
 */

int initLugarLibrePedidos(sPedido *aArray, int cantidad)
{
	int retorno = EXIT_ERROR;
	int i;

	if(aArray != NULL && cantidad >0)
	{
		for(i=0;i<cantidad;i++)
		{
			aArray[i].status = STATUS_EMPTY;
		}
	retorno = EXIT_SUCCESS;
	}
	return retorno;
}

/** \brief Da de alta un pedido (previamente cargado) en el array (en la primer posicion libre que encuentra)
 * \param *aArray es el array en el que se dara de alta
 * \param cantidad es la cantidad de elementos del array
 * \param pedido es una variable con los datos del pedido a dar de alta dentro del array
 * \return -1 si hay algun error o 0 si esta bien.
 *
 */

int altaPedidoPorId(sPedido *aArray, int cantidad,sPedido pedido)
{
	int retorno = EXIT_ERROR;
	int posArray;

	if(aArray != NULL && cantidad >0)
	{
		posArray = buscarLugarLibrePedido(aArray,cantidad);
		if(posArray >= 0 && buscarPedidoPorId(aArray,cantidad,pedido.id) == -1)
			{
				pedido.status=STATUS_NOT_EMPTY;
				pedido.id=generarIdPedido();
				aArray[posArray] = pedido;
				retorno = EXIT_SUCCESS;
			}
	}
	return retorno;
}

/** \brief busca el primer lugar libre en el array
 * \param *aArray es el array de pedidos
 * \param cantidad es la cantidad de elementos del array
 * \return -1 si hay algun error o la POSICION EN EL ARRAY del primer elemento libre
 *
 */

int buscarLugarLibrePedido(sPedido *aArray, int cantidad)
{
	int retorno = EXIT_ERROR;
	int posArray;

	if(aArray != NULL && cantidad >0)
	{
		for(posArray=0;posArray<cantidad;posArray++)
		{
			if(aArray[posArray].status == STATUS_EMPTY)
			{
				retorno = posArray;
				break;
			}
		}
	}
	return retorno;
}

/** \brief busca el elemento con el ID indicado en el array
 * \param *aArray es el array en el que se buscara el ID
 * \param cantidad es la cantidad de elementos del array
 * \param id es el ID a buscar
 * \return -1 si hay algun error o la POSICION EN EL ARRAY del elemento con dicho ID
 *
 */

int buscarPedidoPorId(sPedido *aArray, int cantidad,int id)
{
	int retorno = EXIT_ERROR;
	int posArray;

	if(aArray != NULL && cantidad >0 && id >= 0)
	{
		for(posArray=0;posArray<cantidad;posArray++)
		{
			if(aArray[posArray].status == 1)
			{
				if(aArray[posArray].id == id)
				{
				retorno = posArray;
				break;
				}
			}
		}
	}
	return retorno;
}

/** \brief cargamos datos de un pedido a traves de interaccion con el usuario
 * \param *pedido una variable del tipo pedido en donde cargar los datos
 * \param cliente el array de clientes en donde buscar la informacion
 * \param cantCliente el tamaÃ±o del array de clientes
 * \return -1 si hay algun error o 0 si esta bien
 *
 */

int altaUnSoloPedidoPorUI(sPedido *pedido,sCliente *aCliente,int cantCliente)
{
	int retorno = EXIT_ERROR;

	int bufferEdad;
	int bufferIdCliente;
	float cantKgAux;

	imprimirArrayClientesStatusOk(aCliente,CANT_CLIENTES);
	retorno = getInt(&bufferIdCliente,"Ingrese ID del cliente que realiza el pedido: ","\nError",1,CANT_CLIENTES,CANT_REINTENTOS);
	if(retorno == EXIT_SUCCESS)
	{
		if(buscarClientePorId(aCliente,cantCliente,bufferIdCliente)>=0)
		{
			if(getValidFloatFromString(&cantKgAux,"\nIngrese cant. total de Kg del cliente: ","\nError",1,CANT_MAX_KG,CANT_REINTENTOS)==EXIT_SUCCESS)
			{
				pedido->cantKg = cantKgAux;
				pedido->idCliente = bufferIdCliente;
				pedido->estado = ESTADO_PENDIENTE;
			}
			else
			{
				retorno=EXIT_ERROR;
			}
		}
		else
		{
			retorno=EXIT_ERROR;
		}

	}
	return retorno;
}

